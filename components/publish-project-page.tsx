"use client"

import { useState } from "react"
import { useRouter } from "next/navigation"
import { ArrowLeft, Plus, X, Home, Info } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Label } from "@/components/ui/label"
import { Checkbox } from "@/components/ui/checkbox"
import { Badge } from "@/components/ui/badge"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { Separator } from "@/components/ui/separator"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Switch } from "@/components/ui/switch"

interface Project {
  id: string
  name: string
}

interface ProjectPhoto {
  id: string
  image: string
  title: string
  selected: boolean
}

interface PinterestIdea {
  id: string
  image: string
  title: string
  selected: boolean
}

export function PublishProjectPage() {
  const router = useRouter()
  const [selectedProject, setSelectedProject] = useState<string | null>(null)
  const [includePhoto, setIncludePhoto] = useState(true)
  const [includeInfo, setIncludeInfo] = useState(false)
  const [includeNotes, setIncludeNotes] = useState(true)
  const [includeYarn, setIncludeYarn] = useState(true)
  const [includeNeedles, setIncludeNeedles] = useState(false)
  const [includeCalculations, setIncludeCalculations] = useState(false)
  const [title, setTitle] = useState("")
  const [description, setDescription] = useState("")
  const [question, setQuestion] = useState("")
  const [tags, setTags] = useState<string[]>(["—Å–≤–µ—Ç—Ä", "–æ—Å—ñ–Ω—å", "–≤–æ–≤–Ω–∞"])
  const [tagDialogOpen, setTagDialogOpen] = useState(false)
  const [newTag, setNewTag] = useState("")
  const [publishSuccess, setPublishSuccess] = useState(false)
  const [photoSelectionOpen, setPhotoSelectionOpen] = useState(false)
  const [originalityStatus, setOriginalityStatus] = useState("original")
  const [applyWatermark, setApplyWatermark] = useState(true)
  const [acceptedTerms, setAcceptedTerms] = useState(false)

  // Mock projects data
  const projects: Project[] = [
    { id: "1", name: '–°–≤–µ—Ç—Ä "–û—Å—ñ–Ω—å"' },
    { id: "2", name: '–®–∞–ø–∫–∞ "–°–Ω—ñ–∂–∏–Ω–∫–∞"' },
    { id: "3", name: "–®–∫–∞—Ä–ø–µ—Ç–∫–∏" },
  ]

  // Mock project photos
  const [projectPhotos, setProjectPhotos] = useState<ProjectPhoto[]>([
    { id: "p1", image: "/cozy-knit-scarf.png", title: "–°–≤–µ—Ç—Ä –≥–æ—Ç–æ–≤–∏–π", selected: true },
    { id: "p2", image: "/cozy-knit-basket.png", title: "–ü—Ä–æ—Ü–µ—Å –≤'—è–∑–∞–Ω–Ω—è", selected: false },
    { id: "p3", image: "/cozy-knit-corner.png", title: "–°—Ö–µ–º–∞ –≤—ñ–∑–µ—Ä—É–Ω–∫–∞", selected: true },
    {
      id: "p4",
      image: "/colorful-yarn-skeins.png",
      title: "–ï—Ç–∏–∫–µ—Ç–∫–∞ –ø—Ä—è–∂—ñ",
      selected: false,
    },
  ])

  // Mock Pinterest ideas
  const [pinterestIdeas, setPinterestIdeas] = useState<PinterestIdea[]>([
    {
      id: "pin1",
      image: "/warm-knit-texture.png",
      title: "–ñ–æ–≤—Ç–æ-–∫–æ—Ä–∏—á–Ω–µ–≤–∏–π –º–æ—Ç–∏–≤ üåª",
      selected: true,
    },
    {
      id: "pin2",
      image: "/knitted-leaf-ornament.png",
      title: "–õ–∏—Å—Ç—è–Ω—ñ –æ—Ä–Ω–∞–º–µ–Ω—Ç–∏ üçÅ",
      selected: false,
    },
    {
      id: "pin3",
      image: "/floral-sleeve-detail.png",
      title: "–ú–µ–Ω—à—ñ –º–æ—Ç–∏–≤–∏ –¥–ª—è —Ä—É–∫–∞–≤—ñ–≤",
      selected: true,
    },
  ])

  const popularTags = ["—Å–≤–µ—Ç—Ä", "—à–∞–ø–∫–∞", "—à–∞—Ä—Ñ", "–Ω–æ—Å–∫–∏", "–æ—Å—ñ–Ω—å", "–∑–∏–º–∞", "–≤–µ—Å–Ω–∞", "–ª—ñ—Ç–æ", "–≤–æ–≤–Ω–∞", "–±–∞–≤–æ–≤–Ω–∞", "–∞–∂—É—Ä"]

  const handleAddTag = () => {
    if (newTag && !tags.includes(newTag)) {
      setTags([...tags, newTag])
      setNewTag("")
    }
  }

  const handleRemoveTag = (tag: string) => {
    setTags(tags.filter((t) => t !== tag))
  }

  const handleTagSelect = (tag: string) => {
    if (!tags.includes(tag)) {
      setTags([...tags, tag])
    }
  }

  const toggleProjectPhotoSelection = (id: string) => {
    setProjectPhotos(projectPhotos.map((photo) => (photo.id === id ? { ...photo, selected: !photo.selected } : photo)))
  }

  const togglePinterestIdeaSelection = (id: string) => {
    setPinterestIdeas(pinterestIdeas.map((idea) => (idea.id === id ? { ...idea, selected: !idea.selected } : idea)))
  }

  const handlePublish = () => {
    if (!acceptedTerms) return

    // In a real app, this would publish the project to the community
    setPublishSuccess(true)
    setTimeout(() => {
      router.push("/community")
    }, 2000)
  }

  return (
    <div className="container mx-auto px-4 py-6 max-w-3xl">
      <div className="flex items-center mb-6">
        <Button variant="ghost" size="icon" onClick={() => router.push("/community")} className="mr-2">
          <ArrowLeft className="h-5 w-5" />
        </Button>
        <Button variant="ghost" size="icon" onClick={() => router.push("/")} className="mr-2">
          <Home className="h-5 w-5" />
        </Button>
        <h1 className="text-2xl font-bold">–û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç</h1>
      </div>

      <Alert className="mb-6 bg-primary/10 border-primary/20">
        <Info className="h-4 w-4" />
        <AlertDescription>
          –í–∏ –∑–±–µ—Ä—ñ–≥–∞—î—Ç–µ —É—Å—ñ –ø—Ä–∞–≤–∞ –Ω–∞ —Ü—é —Ä–æ–±–æ—Ç—É. –ú–∏ –ª–∏—à–µ –ø–æ–∫–∞–∑—É—î–º–æ —ó—ó —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º —É –º–µ–∂–∞—Ö —Å–ø—ñ–ª—å–Ω–æ—Ç–∏.
        </AlertDescription>
      </Alert>

      {publishSuccess ? (
        <div className="space-y-6 text-center py-12">
          <div className="flex justify-center">
            <div className="h-16 w-16 rounded-full bg-primary/10 flex items-center justify-center">
              <span className="text-3xl">‚úì</span>
            </div>
          </div>
          <h2 className="text-xl font-bold">–ü—Ä–æ—î–∫—Ç –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!</h2>
          <p className="text-muted-foreground">–í–∞—à –ø—Ä–æ—î–∫—Ç —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ —É —Å–ø—ñ–ª—å–Ω–æ—Ç—ñ.</p>
          <p className="text-muted-foreground">–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Å–ø—ñ–ª—å–Ω–æ—Ç–∏...</p>
        </div>
      ) : (
        <div className="space-y-6">
          <div className="space-y-3">
            <h2 className="text-lg font-medium">–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—î–∫—Ç:</h2>
            <RadioGroup value={selectedProject || ""} onValueChange={setSelectedProject}>
              {projects.map((project) => (
                <div key={project.id} className="flex items-center space-x-2 border p-3 rounded-md">
                  <RadioGroupItem value={project.id} id={`project-${project.id}`} />
                  <Label htmlFor={`project-${project.id}`} className="flex-1 cursor-pointer">
                    {project.name}
                  </Label>
                </div>
              ))}
            </RadioGroup>
          </div>

          <div className="space-y-3 border-t pt-4">
            <h2 className="text-lg font-medium">–°—Ç–∞—Ç—É—Å –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ:</h2>
            <RadioGroup value={originalityStatus} onValueChange={setOriginalityStatus}>
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="original" id="original-work" />
                <Label htmlFor="original-work">–¶–µ –º–æ—è –≤–ª–∞—Å–Ω–∞ —Ä–æ–±–æ—Ç–∞</Label>
              </div>
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="translation" id="translation-work" />
                <Label htmlFor="translation-work">–¶–µ –ø–µ—Ä–µ–∫–ª–∞–¥/–∞–¥–∞–ø—Ç–∞—Ü—ñ—è –∑ –¥–æ–∑–≤–æ–ª—É –∞–≤—Ç–æ—Ä–∞</Label>
              </div>
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="repost" id="repost-work" />
                <Label htmlFor="repost-work">–¶–µ —Ä–µ–ø–æ—Å—Ç —ñ–∑ –¥–æ–∑–≤–æ–ª–æ–º –∞–≤—Ç–æ—Ä–∞</Label>
              </div>
            </RadioGroup>
          </div>

          <div className="space-y-3 border-t pt-4">
            <h2 className="text-lg font-medium">–©–æ –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏:</h2>
            <div className="grid grid-cols-2 gap-4">
              <div className="flex items-start space-x-2">
                <Checkbox id="include-photo" checked={includePhoto} onCheckedChange={setIncludePhoto} />
                <div className="grid gap-1.5 leading-none">
                  <Label htmlFor="include-photo" className="cursor-pointer">
                    –§–æ—Ç–æ –ø—Ä–æ—î–∫—Ç—É
                  </Label>
                </div>
              </div>
              <div className="flex items-start space-x-2">
                <Checkbox id="include-info" checked={includeInfo} onCheckedChange={setIncludeInfo} />
                <div className="grid gap-1.5 leading-none">
                  <Label htmlFor="include-info" className="cursor-pointer">
                    –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
                  </Label>
                </div>
              </div>
              <div className="flex items-start space-x-2">
                <Checkbox id="include-notes" checked={includeNotes} onCheckedChange={setIncludeNotes} />
                <div className="grid gap-1.5 leading-none">
                  <Label htmlFor="include-notes" className="cursor-pointer">
                    –í—Å—ñ –Ω–æ—Ç–∞—Ç–∫–∏
                  </Label>
                </div>
              </div>
              <div className="flex items-start space-x-2">
                <Checkbox id="include-yarn" checked={includeYarn} onCheckedChange={setIncludeYarn} />
                <div className="grid gap-1.5 leading-none">
                  <Label htmlFor="include-yarn" className="cursor-pointer">
                    –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞ –ø—Ä—è–∂–∞
                  </Label>
                </div>
              </div>
              <div className="flex items-start space-x-2">
                <Checkbox id="include-needles" checked={includeNeedles} onCheckedChange={setIncludeNeedles} />
                <div className="grid gap-1.5 leading-none">
                  <Label htmlFor="include-needles" className="cursor-pointer">
                    –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ —Å–ø–∏—Ü—ñ
                  </Label>
                </div>
              </div>
              <div className="flex items-start space-x-2">
                <Checkbox
                  id="include-calculations"
                  checked={includeCalculations}
                  onCheckedChange={setIncludeCalculations}
                />
                <div className="grid gap-1.5 leading-none">
                  <Label htmlFor="include-calculations" className="cursor-pointer">
                    –†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏
                  </Label>
                </div>
              </div>
            </div>
          </div>

          <div className="flex items-center space-x-2">
            <Label htmlFor="watermark" className="flex-1">
              –î–æ–¥–∞—Ç–∏ –≤–æ–¥—è–Ω–∏–π –∑–Ω–∞–∫ –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É —Ñ–æ—Ç–æ
            </Label>
            <Switch id="watermark" checked={applyWatermark} onCheckedChange={setApplyWatermark} />
          </div>

          <div className="space-y-3 border-t pt-4">
            <div className="flex justify-between items-center">
              <h2 className="text-lg font-medium">–§–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó:</h2>
              <Button variant="outline" size="sm" onClick={() => setPhotoSelectionOpen(true)}>
                –û–±—Ä–∞—Ç–∏ —Ñ–æ—Ç–æ
              </Button>
            </div>

            <div className="space-y-4">
              <div>
                <h3 className="text-sm font-medium mb-2">–û—Å–Ω–æ–≤–Ω—ñ —Ñ–æ—Ç–æ –ø—Ä–æ—î–∫—Ç—É:</h3>
                <div className="grid grid-cols-4 gap-2">
                  {projectPhotos
                    .filter((photo) => photo.selected)
                    .map((photo) => (
                      <div key={photo.id} className="relative aspect-square">
                        <img
                          src={photo.image || "/placeholder.svg"}
                          alt={photo.title}
                          className="w-full h-full object-cover rounded-md"
                        />
                        {applyWatermark && (
                          <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
                            <div className="text-white text-opacity-50 transform -rotate-45 text-xs font-bold">
                              ¬© –í–∞—à–µ —ñ–º'—è
                            </div>
                          </div>
                        )}
                      </div>
                    ))}
                </div>
              </div>

              <div>
                <h3 className="text-sm font-medium mb-2">Moodboard –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è:</h3>
                <div className="grid grid-cols-4 gap-2">
                  {pinterestIdeas
                    .filter((idea) => idea.selected)
                    .map((idea) => (
                      <div key={idea.id} className="relative aspect-square">
                        <img
                          src={idea.image || "/placeholder.svg"}
                          alt={idea.title}
                          className="w-full h-full object-cover rounded-md"
                        />
                        <Badge className="absolute bottom-1 left-1 bg-white/80 text-black text-xs">Pinterest</Badge>
                      </div>
                    ))}
                </div>
              </div>
            </div>
          </div>

          <div className="space-y-3 border-t pt-4">
            <div className="space-y-2">
              <Label htmlFor="title">–ù–∞–∑–≤–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó:</Label>
              <Input
                id="title"
                placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó..."
                value={title}
                onChange={(e) => setTitle(e.target.value)}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="description">–û–ø–∏—Å:</Label>
              <Textarea
                id="description"
                placeholder="–†–æ–∑–∫–∞–∂—ñ—Ç—å –ø—Ä–æ —Å–≤—ñ–π –ø—Ä–æ—î–∫—Ç..."
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                rows={4}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="question">–î–æ–¥–∞–π—Ç–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:</Label>
              <Textarea
                id="question"
                placeholder="–ü–æ—Å—Ç–∞–≤—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è —Å–ø—ñ–ª—å–Ω–æ—Ç—ñ..."
                value={question}
                onChange={(e) => setQuestion(e.target.value)}
                rows={2}
              />
            </div>
          </div>

          <div className="space-y-3 border-t pt-4">
            <div className="flex justify-between items-center">
              <Label>–¢–µ–≥–∏:</Label>
              <Button variant="outline" size="sm" onClick={() => setTagDialogOpen(true)}>
                <Plus className="h-4 w-4 mr-1" />
                –î–æ–¥–∞—Ç–∏ —Ç–µ–≥–∏
              </Button>
            </div>

            <div className="flex flex-wrap gap-2">
              {tags.map((tag) => (
                <Badge key={tag} className="flex items-center gap-1">
                  #{tag}
                  <Button
                    variant="ghost"
                    size="icon"
                    className="h-4 w-4 p-0 hover:bg-transparent"
                    onClick={() => handleRemoveTag(tag)}
                  >
                    <X className="h-3 w-3" />
                  </Button>
                </Badge>
              ))}
            </div>
          </div>

          <div className="flex items-start space-x-2 pt-2">
            <Checkbox id="terms" checked={acceptedTerms} onCheckedChange={(checked) => setAcceptedTerms(!!checked)} />
            <div>
              <Label htmlFor="terms" className="text-sm">
                –Ø –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é, —â–æ –º–∞—é –ø—Ä–∞–≤–∞ –Ω–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é —Ü—å–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É —Ç–∞ –ø–æ–≥–æ–¥–∂—É—é—Å—å –∑{" "}
                <Button variant="link" className="h-auto p-0" onClick={() => router.push("/terms")}>
                  –£–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
                </Button>
              </Label>
            </div>
          </div>

          <div className="pt-4">
            <Button className="w-full" onClick={handlePublish} disabled={!selectedProject || !acceptedTerms}>
              –û–ü–£–ë–õ–Ü–ö–£–í–ê–¢–ò
            </Button>
          </div>
        </div>
      )}

      <Dialog open={tagDialogOpen} onOpenChange={setTagDialogOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>–í–∏–±–µ—Ä—ñ—Ç—å —Ç–µ–≥–∏</DialogTitle>
            <DialogDescription>–î–æ–¥–∞–π—Ç–µ —Ç–µ–≥–∏ –¥–ª—è –∫—Ä–∞—â–æ—ó –≤–∏–¥–∏–º–æ—Å—Ç—ñ –≤–∞—à–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É</DialogDescription>
          </DialogHeader>

          <div className="space-y-4 py-4">
            <div className="flex items-center space-x-2">
              <Input
                placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–≥"
                value={newTag}
                onChange={(e) => setNewTag(e.target.value)}
                className="flex-1"
              />
              <Button onClick={handleAddTag} disabled={!newTag || tags.includes(newTag)}>
                –î–æ–¥–∞—Ç–∏
              </Button>
            </div>

            <div>
              <p className="text-sm font-medium mb-2">–ü–æ–ø—É–ª—è—Ä–Ω—ñ —Ç–µ–≥–∏:</p>
              <div className="flex flex-wrap gap-2">
                {popularTags.map((tag) => (
                  <Badge
                    key={tag}
                    variant={tags.includes(tag) ? "default" : "outline"}
                    className="cursor-pointer"
                    onClick={() => handleTagSelect(tag)}
                  >
                    #{tag}
                  </Badge>
                ))}
              </div>
            </div>

            <div>
              <p className="text-sm font-medium mb-2">–í–∞—à—ñ —Ç–µ–≥–∏:</p>
              <div className="flex flex-wrap gap-2">
                {tags.map((tag) => (
                  <Badge key={tag} className="flex items-center gap-1">
                    #{tag}
                    <Button
                      variant="ghost"
                      size="icon"
                      className="h-4 w-4 p-0 hover:bg-transparent"
                      onClick={() => handleRemoveTag(tag)}
                    >
                      <X className="h-3 w-3" />
                    </Button>
                  </Badge>
                ))}
              </div>
            </div>
          </div>

          <DialogFooter>
            <Button onClick={() => setTagDialogOpen(false)}>–ì–æ—Ç–æ–≤–æ</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Dialog open={photoSelectionOpen} onOpenChange={setPhotoSelectionOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>–û–±—Ä–∞—Ç–∏ —Ñ–æ—Ç–æ –¥–ª—è –≥–∞–ª–µ—Ä–µ—ó</DialogTitle>
          </DialogHeader>

          <div className="space-y-4 py-4">
            <div>
              <h3 className="text-sm font-medium mb-2">–û—Å–Ω–æ–≤–Ω—ñ —Ñ–æ—Ç–æ –ø—Ä–æ—î–∫—Ç—É:</h3>
              <div className="grid grid-cols-3 gap-2">
                {projectPhotos.map((photo) => (
                  <div
                    key={photo.id}
                    className={`relative aspect-square cursor-pointer border-2 rounded-md overflow-hidden ${
                      photo.selected ? "border-primary" : "border-transparent"
                    }`}
                    onClick={() => toggleProjectPhotoSelection(photo.id)}
                  >
                    <img
                      src={photo.image || "/placeholder.svg"}
                      alt={photo.title}
                      className="w-full h-full object-cover"
                    />
                    {photo.selected && (
                      <div className="absolute top-1 right-1 bg-primary text-white rounded-full w-5 h-5 flex items-center justify-center">
                        ‚úì
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>

            <Separator />

            <div>
              <h3 className="text-sm font-medium mb-2">Moodboard –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è (Pinterest):</h3>
              <div className="grid grid-cols-3 gap-2">
                {pinterestIdeas.map((idea) => (
                  <div
                    key={idea.id}
                    className={`relative aspect-square cursor-pointer border-2 rounded-md overflow-hidden ${
                      idea.selected ? "border-primary" : "border-transparent"
                    }`}
                    onClick={() => togglePinterestIdeaSelection(idea.id)}
                  >
                    <img
                      src={idea.image || "/placeholder.svg"}
                      alt={idea.title}
                      className="w-full h-full object-cover"
                    />
                    <Badge className="absolute bottom-1 left-1 bg-white/80 text-black text-xs">Pinterest</Badge>
                    {idea.selected && (
                      <div className="absolute top-1 right-1 bg-primary text-white rounded-full w-5 h-5 flex items-center justify-center">
                        ‚úì
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          </div>

          <DialogFooter>
            <Button variant="outline" onClick={() => setPhotoSelectionOpen(false)}>
              –°–∫–∞—Å—É–≤–∞—Ç–∏
            </Button>
            <Button onClick={() => setPhotoSelectionOpen(false)}>–î–æ–¥–∞—Ç–∏</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}
