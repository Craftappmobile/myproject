import React, { createContext, useContext, useState } from "react"; import { Pressable, View } from "react-native"; import { cn } from "@/lib/utils";  type TabsContextValue = {   value: string;   onValueChange: (value: string) => void; };  const TabsContext = createContext<TabsContextValue | null>(null);  function useTabs() {   const context = useContext(TabsContext);   if (!context) {     throw new Error("useTabs must be used within a Tabs component");   }   return context; }  type TabsProps = {   defaultValue?: string;   value?: string;   onValueChange?: (value: string) => void;   className?: string;   children: React.ReactNode; };  function Tabs({   defaultValue,   value,   onValueChange,   className,   children, }: TabsProps) {   const [internalValue, setInternalValue] = useState<string>(defaultValue || "");    const handleValueChange = (newValue: string) => {     if (onValueChange) {       onValueChange(newValue);     } else {       setInternalValue(newValue);     }   };    return (     <TabsContext.Provider       value={{         value: value !== undefined ? value : internalValue,         onValueChange: handleValueChange,       }}     >       <View className={cn("", className)}>{children}</View>     </TabsContext.Provider>   ); }  type TabsListProps = {   className?: string;   children: React.ReactNode; };  function TabsList({ className, children }: TabsListProps) {   return (     <View       className={cn(         "flex-row bg-muted rounded-lg p-1",         className       )}     >       {children}     </View>   ); }  type TabsTriggerProps = {   value: string;   className?: string;   children: React.ReactNode; };  function TabsTrigger({ value, className, children }: TabsTriggerProps) {   const { value: selectedValue, onValueChange } = useTabs();   const isSelected = selectedValue === value;    return (     <Pressable       onPress={() => onValueChange(value)}       className={cn(         "flex-1 items-center justify-center py-2 px-3 rounded-md",         isSelected ? "bg-background" : "transparent",         className       )}     >       {children}     </Pressable>   ); }  type TabsContentProps = {   value: string;   className?: string;   children: React.ReactNode; };  function TabsContent({ value, className, children }: TabsContentProps) {   const { value: selectedValue } = useTabs();      if (selectedValue !== value) return null;    return (     <View className={cn("", className)}>       {children}     </View>   ); }  Tabs.List = TabsList; Tabs.Trigger = TabsTrigger; Tabs.Content = TabsContent;  export { Tabs };
